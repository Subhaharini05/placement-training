import random
import math

def create_route(city_list):
    return random.sample(city_list, len(city_list))

def initial_population(pop_size, city_list):
    return [create_route(city_list) for _ in range(pop_size)]

def rank_routes(population):
    fitness_results = {}
    for i, route in enumerate(population):
        fitness_results[i] = route_fitness(route)
    return sorted(fitness_results.items(), key=lambda x: x[1], reverse=True)

def route_fitness(route):
    distance = 0
    for i in range(len(route)):
        city1 = route[i]
        city2 = route[i + 1] if i + 1 < len(route) else route[0]
        distance += math.dist(city1, city2)
    return 1 / distance

def selection(ranked_pop, elite_size):
    selection_results = []
    for i in range(elite_size):
        selection_results.append(ranked_pop[i][0])
    for i in range(len(ranked_pop) - elite_size):
        selection_results.append(ranked_pop[random.randint(0, len(ranked_pop) - 1)][0])
    return selection_results

def mating_pool(population, selection_results):
    return [population[i] for i in selection_results]

def breed(parent1, parent2):
    gene_a = int(random.random() * len(parent1))
    gene_b = int(random.random() * len(parent1))
    start_gene = min(gene_a, gene_b)
    end_gene = max(gene_a, gene_b)
    child_p1 = parent1[start_gene:end_gene]
    child_p2 = [item for item in parent2 if item not in child_p1]
    return child_p1 + child_p2

def breed_population(matingpool, elite_size):
    children = []
    length = len(matingpool) - elite_size
    pool = random.sample(matingpool, len(matingpool))
    for i in range(elite_size):
        children.append(matingpool[i])
    for i in range(length):
        child = breed(pool[i], pool[len(matingpool) - i - 1])
        children.append(child)
    return children

def mutate(route, mutation_rate):
    for swapped in range(len(route)):
        if random.random() < mutation_rate:
            swap_with = int(random.random() * len(route))
            city1 = route[swapped]
            city2 = route[swap_with]
            route[swapped] = city2
            route[swap_with] = city1
    return route

def mutate_population(population, mutation_rate):
    return [mutate(ind, mutation_rate) for ind in population]

def next_generation(current_gen, elite_size, mutation_rate):
    ranked_pop = rank_routes(current_gen)
    selection_results = selection(ranked_pop, elite_size)
    matingpool = mating_pool(current_gen, selection_results)
    children = breed_population(matingpool, elite_size)
    return mutate_population(children, mutation_rate)

def genetic_algorithm(city_list, pop_size, elite_size, mutation_rate, generations):
    pop = initial_population(pop_size, city_list)
    for i in range(generations):
        pop = next_generation(pop, elite_size, mutation_rate)
    best_route_index = rank_routes(pop)[0][0]
    return pop[best_route_index]
city_list = [(random.uniform(-100, 100), random.uniform(-100, 100)) for _ in range(20)]
best_route = genetic_algorithm(city_list, pop_size=100, elite_size=20, mutation_rate=0.01, generations=500)
print(best_route)

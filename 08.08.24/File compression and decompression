import heapq
from collections import defaultdict

class HuffmanCoding:
    def __init__(self):
        self.heap = []
        self.codes = {}
        self.reverse_mapping = {}

    def frequency_dict(self, text):
        frequency = defaultdict(int)
        for character in text:
            frequency[character] += 1
        return frequency

    def build_heap(self, frequency):
        for key in frequency:
            heapq.heappush(self.heap, (frequency[key], key))

    def build_tree(self):
        while len(self.heap) > 1:
            node1 = heapq.heappop(self.heap)
            node2 = heapq.heappop(self.heap)
            merged = (node1[0] + node2[0], node1, node2)
            heapq.heappush(self.heap, merged)

    def build_codes_helper(self, root, current_code):
        if len(root) == 2:
            self.codes[root[1]] = current_code
            self.reverse_mapping[current_code] = root[1]
            return
        self.build_codes_helper(root[1], current_code + "0")
        self.build_codes_helper(root[2], current_code + "1")

    def build_codes(self):
        root = heapq.heappop(self.heap)
        current_code = ""
        self.build_codes_helper(root, current_code)

    def get_encoded_text(self, text):
        encoded_text = ""
        for character in text:
            encoded_text += self.codes[character]
        return encoded_text

    def pad_encoded_text(self, encoded_text):
        extra_padding = 8 - len(encoded_text) % 8
        for _ in range(extra_padding):
            encoded_text += "0"
        padded_info = "{0:08b}".format(extra_padding)
        encoded_text = padded_info + encoded_text
        return encoded_text

    def compress(self, text):
        frequency = self.frequency_dict(text)
        self.build_heap(frequency)
        self.build_tree()
        self.build_codes()

        encoded_text = self.get_encoded_text(text)
        padded_encoded_text = self.pad_encoded_text(encoded_text)

        return padded_encoded_text

    def decompress(self, padded_encoded_text):
        padded_info = padded_encoded_text[:8]
        extra_padding = int(padded_info, 2)
        encoded_text = padded_encoded_text[8:]
        encoded_text = encoded_text[:-1 * extra_padding]

        current_code = ""
        decoded_text = ""

        for bit in encoded_text:
            current_code += bit
            if current_code in self.reverse_mapping:
                character = self.reverse_mapping[current_code]
                decoded_text += character
                current_code = ""

        return decoded_text

text = "this is an example for huffman encoding"
huffman = HuffmanCoding()
compressed = huffman.compress(text)
print("Compressed:", compressed)
decompressed = huffman.decompress(compressed)
print("Decompressed:", decompressed)
